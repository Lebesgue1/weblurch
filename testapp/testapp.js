// Generated by CoffeeScript 1.7.1
(function() {
  window.testAppSetup = function() {
    window.LE = new LurchEditor(document.getElementById('editor'));
    window.testHistory = [
      {
        code: '',
        state: LE.getElement().toJSON()
      }
    ];
    'source history historyBody historyTab\ncodeInput testNameInput\nrunButton yesButton noButton downloadButton'.split(' ').map(function(id) {
      return window[id] = document.getElementById(id);
    });
    window.maindiv = LE.getElement();
    ($(runButton)).on('click', runButtonClicked);
    ($(yesButton)).on('click', yesButtonClicked);
    ($(noButton)).on('click', noButtonClicked);
    ($(downloadButton)).on('click', downloadButtonClicked);
    ($(codeInput)).on('keyup', function(event) {
      if (event.keyCode === 13) {
        return runButtonClicked();
      }
    });
    ($(sourceTab)).on('click', updateSourceTab);
    ($(historyTab)).on('click', updateHistoryTab);
    updateSourceTab();
    return codeInput.focus();
  };

  window.updateDispatcher = function() {
    if (($(source)).hasClass('active')) {
      updateSourceTab();
    }
    if (($(history)).hasClass('active')) {
      return updateHistoryTab();
    }
  };

  window.updateSourceTab = function() {
    var code;
    code = LE.getElement().outerHTML.replace(/&/g, '&amp;').replace(/>/g, '&gt;').replace(/</g, '&lt;').replace(/'/g, '&apos;').replace(/"/g, '&quot;');
    return source.innerHTML = "<pre>" + code + "</pre>";
  };

  window.runButtonClicked = function(event) {
    eval(codeInput.value);
    testHistory.push({
      code: codeInput.value,
      state: LE.getElement().toJSON()
    });
    updateDispatcher();
    codeInput.value = '';
    return codeInput.focus();
  };

  window.yesButtonClicked = function(event) {
    testHistory[testHistory.length - 1].correct = true;
    return updateDispatcher();
  };

  window.noButtonClicked = function(event) {
    testHistory[testHistory.length - 1].correct = false;
    return updateDispatcher();
  };

  window.downloadButtonClicked = function(event) {
    var blob, data, link;
    data = JSON.stringify(testHistory);
    blob = new Blob([data], {
      type: 'application/json'
    });
    link = document.createElement('a');
    link.setAttribute('href', URL.createObjectURL(blob));
    link.setAttribute('download', "" + (testNameInput.value || 'test-history') + ".json");
    return link.click();
  };

  window.updateHistoryTab = function() {
    var code, escaped, index, representation, state, step, title, type, _i, _len;
    representation = '';
    for (index = _i = 0, _len = testHistory.length; _i < _len; index = ++_i) {
      step = testHistory[index];
      if (index > 0) {
        code = step.code.replace(/&/g, '&amp;').replace(/>/g, '&gt;').replace(/</g, '&lt;').replace(/'/g, '&apos;').replace(/"/g, '&quot;');
        representation += "<div class='panel panel-info'>\n  <div class='panel-heading'>\n    <h3 class='panel-title'\n    >Command " + index + ":</h3>\n  </div>\n  <div class='panel-body'>\n    <pre>" + code + "</pre>\n  </div>\n</div>";
      }
      if (!step.hasOwnProperty('correct')) {
        type = 'default';
      } else {
        type = step.correct ? 'success' : 'danger';
      }
      code = Node.fromJSON(step.state).outerHTML;
      escaped = code.replace(/&/g, '&amp;').replace(/>/g, '&gt;').replace(/</g, '&lt;').replace(/'/g, '&apos;').replace(/"/g, '&quot;');
      code = code.replace(/\s+id=['"][^'"]+['"]/g, '');
      state = "<pre class='gap-below-2'>" + escaped + "</pre>\n" + code;
      title = index === 0 ? "Initial state:" : "State after command " + index + ":";
      if (index === 0) {
        type += ' gap-before-2';
      }
      representation += "<div class='panel panel-" + type + "'>\n  <div class='panel-heading'>\n    <h3 class='panel-title'>" + title + "</h3>\n  </div>\n  <div class='panel-body'>" + state + "</div>\n</div>";
    }
    return historyBody.innerHTML = representation;
  };

}).call(this);

//# sourceMappingURL=testapp.map
