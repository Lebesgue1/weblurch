// Generated by CoffeeScript 1.7.1
(function() {
  var resizeHistoryHeight;

  window.testAppSetup = function() {
    var filename, filenames, item, _i, _len;
    window.LE = new LurchEditor(document.getElementById('editor'));
    initializeHistory();
    window.maindiv = LE.getElement();
    ($(runButton)).on('click', runButtonClicked);
    ($(resetButton)).on('click', resetButtonClicked);
    ($(downloadButton)).on('click', downloadButtonClicked);
    ($(undoButton)).on('click', undoButtonClicked);
    ($(runFullHistoryButton)).on('click', runFullHistoryButtonClicked);
    ($(saveStateCommentsButton)).on('click', saveStateCommentsButtonClicked);
    ($(codeInput)).on('keydown', function(event) {
      if (event.keyCode === 13) {
        return runButtonClicked();
      }
    });
    ($(commentEditInput)).on('keydown', function(event) {
      if (event.keyCode === 13 && event.shiftKey) {
        saveStateCommentsButtonClicked();
        return false;
      }
    });
    ($(sourceTab)).on('click', updateSourceTab);
    ($(historyTab)).on('click', updateHistoryTab);
    filenames = Object.keys(allTestHistories);
    filenames.sort();
    filenames.unshift('Compare to a saved history...');
    for (_i = 0, _len = filenames.length; _i < _len; _i++) {
      filename = filenames[_i];
      item = document.createElement('option');
      item.textContent = filename;
      savedHistoriesList.appendChild(item);
    }
    ($(savedHistoriesList)).change(chosenHistoryChanged);
    resizeHistoryHeight();
    ($(window)).resize(resizeHistoryHeight);
    updateView();
    return codeInput.focus();
  };

  window.updateView = function() {
    if (($(sourceView)).hasClass('active')) {
      updateSourceTab();
    }
    if (($(historyView)).hasClass('active')) {
      return updateHistoryTab();
    }
  };

  window.updateSourceTab = function() {
    var code;
    code = LE.getElement().outerHTML.replace(/&/g, '&amp;').replace(/>/g, '&gt;').replace(/</g, '&lt;').replace(/'/g, '&apos;').replace(/"/g, '&quot;');
    return sourceView.innerHTML = "<pre>" + code + "</pre>";
  };

  window.runCodeInModel = function(code) {
    eval(code);
    return testHistory.push({
      code: code,
      state: LE.getElement().toJSON()
    });
  };

  window.runButtonClicked = function(event) {
    runCodeInModel(codeInput.value);
    updateView();
    codeInput.value = '';
    return codeInput.focus();
  };

  window.runSavedStep = function(index) {
    var savedHistory, _ref;
    savedHistory = (_ref = window.comparisonHistory) != null ? _ref.data : void 0;
    if (savedHistory && index < savedHistory.length) {
      runCodeInModel(savedHistory[index].code);
      return updateView();
    }
  };

  window.runFullHistoryButtonClicked = function(event) {
    var savedHistory, step, _i, _len, _ref, _ref1;
    savedHistory = (_ref = window.comparisonHistory) != null ? _ref.data : void 0;
    if (savedHistory) {
      testHistory[testHistory.length - 1].comments = savedHistory[0].comments;
      _ref1 = savedHistory.slice(1);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        step = _ref1[_i];
        runCodeInModel(step.code);
        testHistory[testHistory.length - 1].comments = step.comments;
      }
      return updateView();
    }
  };

  window.yesButtonClicked = function(index) {
    if (testHistory[index].correct === true) {
      delete testHistory[index].correct;
    } else {
      testHistory[index].correct = true;
    }
    return updateView();
  };

  window.noButtonClicked = function(index) {
    if (testHistory[index].correct === false) {
      delete testHistory[index].correct;
    } else {
      testHistory[index].correct = false;
    }
    return updateView();
  };

  window.editStateComments = function(index) {
    ($(commentEditInput)).val(testHistory[index].comments);
    commentEditInput.comesFromIndex = index;
    ($(commentEditDialog)).modal({
      show: true,
      backdrop: true,
      keyboard: true
    });
    return ($(commentEditDialog)).on('shown.bs.modal', function(event) {
      return ($(commentEditInput)).focus();
    });
  };

  window.saveStateCommentsButtonClicked = function(event) {
    var index;
    index = commentEditInput.comesFromIndex;
    testHistory[index].comments = ($(commentEditInput)).val().trim();
    ($(commentEditDialog)).modal('hide');
    return updateView();
  };

  window.downloadButtonClicked = function(event) {
    var blob, data, link;
    data = JSON.stringify(testHistory, null, 2);
    blob = new Blob([data], {
      type: 'application/json'
    });
    link = document.createElement('a');
    link.setAttribute('href', URL.createObjectURL(blob));
    link.setAttribute('download', "" + (testNameInput.value || 'test-history') + ".json");
    return link.click();
  };

  window.resetButtonClicked = function(event) {
    var current, freshDocument;
    freshDocument = Node.fromJSON(testHistory[0].state);
    current = window.LE.getElement();
    current.parentNode.replaceChild(freshDocument, current);
    window.LE = new LurchEditor(freshDocument);
    window.maindiv = freshDocument;
    initializeHistory();
    chosenHistoryChanged();
    return updateView();
  };

  window.undoButtonClicked = function(event) {
    var oldHistory, step, _i, _len, _ref;
    oldHistory = testHistory;
    resetButtonClicked();
    _ref = oldHistory.slice(1, -1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      step = _ref[_i];
      runCodeInModel(step.code);
    }
    return updateView();
  };

  window.chosenHistoryChanged = function(event) {
    var filename;
    filename = ($(savedHistoriesList)).val();
    if (filename in allTestHistories) {
      window.comparisonHistory = {
        filename: filename,
        data: allTestHistories[filename]
      };
    } else {
      window.comparisonHistory = null;
    }
    return updateView();
  };

  window.historyCommandRepresentation = function(step, index, details) {
    var code;
    if (details == null) {
      details = '';
    }
    code = step.code.replace(/&/g, '&amp;').replace(/>/g, '&gt;').replace(/</g, '&lt;').replace(/'/g, '&apos;').replace(/"/g, '&quot;');
    return "<div class='panel panel-info'>\n  <div class='panel-heading'>\n    " + details + "\n    <h3 class='panel-title'>Command " + index + ":</h3>\n  </div>\n  <div class='panel-body'>\n    <pre>" + code + "</pre>\n  </div>\n</div>";
  };

  window.historyStateRepresentation = function(step, index, details, type) {
    var code, comments, escaped, state, title;
    if (details == null) {
      details = '';
    }
    if (type == null) {
      type = 'default';
    }
    code = Node.fromJSON(step.state).outerHTML;
    escaped = code.replace(/&/g, '&amp;').replace(/>/g, '&gt;').replace(/</g, '&lt;').replace(/'/g, '&apos;').replace(/"/g, '&quot;');
    code = code.replace(/\s+id=['"][^'"]+['"]/g, '');
    state = "<pre class='gap-below-2'>" + escaped + "</pre>\n" + code;
    if (index === 0) {
      title = "Initial state:";
      type += ' gap-before-2';
    } else {
      title = "State after command " + index + ":";
    }
    if (step.comments) {
      comments = "<div class='well well-sm'>\n    <span class='glyphicon glyphicon-info-sign'>\n    </span>\n    " + step.comments + "\n</div>";
    } else {
      comments = '';
    }
    return "<div class='panel panel-" + type + "'>\n    <div class='panel-heading'>\n        " + details + "\n        <h3 class='panel-title'>" + title + "</h3>\n    </div>\n    <div class='panel-body'>\n        " + comments + "\n        " + state + "\n    </div>\n</div>";
  };

  window.updateHistoryTab = function() {
    var code, compare, current, details, diffIndicator, index, left, makeEditButton, makeRowOfTwo, makeRunButton, makeThumbButtons, representation, right, sameIndicator, saved, state, step, type, _i, _j, _len, _ref, _ref1, _ref2;
    makeRunButton = function(index) {
      return "<button type='button'\n        class='btn btn-xs btn-default pull-right'\n        data-toggle='tooltip' title='Run'\n        onclick='runSavedStep(" + index + ");'\n ><span class='glyphicon glyphicon-play'>\n        </span></button>";
    };
    makeEditButton = function(index) {
      return "<button type='button'\n        class='btn btn-xs btn-default pull-right'\n        data-toggle='tooltip' title='Edit comments'\n        onclick='editStateComments(" + index + ");'\n ><span class='glyphicon glyphicon-pencil'>\n        </span></button>";
    };
    makeThumbButtons = function(index) {
      return "<button type='button'\n        class='btn btn-xs btn-danger pull-right'\n        data-toggle='tooltip' title='Mark incorrect'\n        onclick='noButtonClicked(" + index + ");'\n ><span class='glyphicon glyphicon-thumbs-down'>\n        </span></button>\n<button type='button'\n        class='btn btn-xs btn-success pull-right'\n        data-toggle='tooltip' title='Mark correct'\n        onclick='yesButtonClicked(" + index + ");'\n ><span class='glyphicon glyphicon-thumbs-up'>\n        </span></button>";
    };
    sameIndicator = '<div class=\'pull-right\'>SAME\n    <span class=\'glyphicon glyphicon-ok\'></span>\n</div>';
    diffIndicator = '<div class=\'pull-right\'>DIFFERENT\n    <span class=\'glyphicon glyphicon-remove\'></span>\n</div>';
    makeRowOfTwo = function(left, right) {
      return "<div class='row'>\n    <div class='col-md-6'>" + left + "</div>\n    <div class='col-md-6'>" + right + "</div>\n</div>";
    };
    representation = '';
    compare = ((_ref = window.comparisonHistory) != null ? _ref.data : void 0) || null;
    for (index = _i = 0, _len = testHistory.length; _i < _len; index = ++_i) {
      step = testHistory[index];
      if (index > 0) {
        current = historyCommandRepresentation(step, index);
        if (compare) {
          if (index < compare.length) {
            saved = historyCommandRepresentation(compare[index], index, makeRunButton(index));
          } else {
            saved = '';
          }
          current = makeRowOfTwo(current, saved);
        }
        representation += current;
      }
      if (!step.hasOwnProperty('correct')) {
        type = 'default';
      } else {
        type = step.correct ? 'success' : 'danger';
      }
      current = historyStateRepresentation(step, index, makeThumbButtons(index) + makeEditButton(index), type);
      if (compare) {
        if (index < compare.length) {
          left = JSON.stringify(step.state);
          right = JSON.stringify(compare[index].state);
          if (left === right) {
            details = sameIndicator;
            type = 'success';
          } else {
            details = diffIndicator;
            type = 'danger';
          }
          saved = historyStateRepresentation(compare[index], index, details, type);
        } else {
          saved = '';
        }
        current = makeRowOfTwo(current, saved);
      }
      representation += current;
    }
    if (compare && testHistory.length < compare.length) {
      for (index = _j = _ref1 = testHistory.length, _ref2 = compare.length; _ref1 <= _ref2 ? _j < _ref2 : _j > _ref2; index = _ref1 <= _ref2 ? ++_j : --_j) {
        step = compare[index];
        code = historyCommandRepresentation(step, index, makeRunButton(index));
        state = historyStateRepresentation(compare[index], index, '', 'default');
        representation += makeRowOfTwo('', code);
        representation += makeRowOfTwo('', state);
      }
    }
    return historyBody.innerHTML = representation;
  };

  resizeHistoryHeight = function() {
    var child, theRest, _i, _len, _ref;
    theRest = 75;
    _ref = Array.prototype.slice.apply(mainContainer.childNodes);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      if (($(child)).hasClass('tab-content')) {
        break;
      }
      if (child instanceof HTMLElement) {
        theRest += ($(child)).outerHeight(true);
      }
    }
    return ($(historyBody)).height(($(window)).height() - theRest);
  };

  window.initializeHistory = function() {
    window.testHistory = [
      {
        code: '',
        state: LE.getElement().toJSON()
      }
    ];
    return window.comparisonHistory = null;
  };

}).call(this);

//# sourceMappingURL=testapp.map
