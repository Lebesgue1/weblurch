// Generated by CoffeeScript 1.8.0
(function() {
  var appIsRunningOnGitHub, embedMetadata, extractMetadata;

  setAppName('Lurch');

  window.menuBarIcon = {
    src: 'icons/apple-touch-icon-76x76.png',
    width: '26px',
    height: '26px',
    padding: '2px'
  };

  window.groupTypes = [
    {
      name: 'me',
      text: 'Meaningful expression',
      imageHTML: '<font color="#996666">[]</font>',
      openImageHTML: '<font color="#996666">[</font>',
      closeImageHTML: '<font color="#996666">]</font>',
      tooltip: 'Make text a meaningful expression',
      color: '#996666'
    }
  ];

  window.pluginsToLoad = ['mediawiki', 'settings', 'dialogs'];

  embedMetadata = function(documentHTML, metadataObject) {
    var encoding;
    if (metadataObject == null) {
      metadataObject = {};
    }
    encoding = encodeURIComponent(JSON.stringify(metadataObject));
    return "<span id='metadata' style='display: none;' >" + encoding + "</span>" + documentHTML;
  };

  extractMetadata = function(html) {
    var match, re;
    re = /^<span[^>]+id=.metadata.[^>]*>([^<]*)<\/span>/;
    if (match = re.exec(html)) {
      return {
        metadata: JSON.parse(decodeURIComponent(match[1])),
        document: html.slice(match[0].length)
      };
    } else {
      return {
        metadata: null,
        document: html
      };
    }
  };

  window.groupMenuItems = {
    file_order: 'wikiimport wikiexport | appsettings docsettings',
    wikiimport: {
      text: 'Import from wiki...',
      context: 'file',
      onclick: function() {
        var pageName;
        if (appIsRunningOnGitHub()) {
          return;
        }
        pageName = prompt('Give the name of the page to import (case sensitive)', 'Main Page');
        if (pageName === null) {
          return;
        }
        return tinymce.activeEditor.MediaWiki.getPageContent(pageName, function(content, error) {
          var document, metadata, _ref;
          if (error) {
            tinymce.activeEditor.Dialogs.alert({
              title: 'Wiki Error',
              message: "<p>Error loading content from wiki:</p> <p>" + (error.split('\n')[0]) + "</p>"
            });
            console.log(error);
            return;
          }
          _ref = extractMetadata(content), metadata = _ref.metadata, document = _ref.document;
          if (metadata == null) {
            tinymce.activeEditor.Dialogs.alert({
              title: 'Not a Lurch document',
              message: '<p><b>The wiki page that you attempted to import is not a Lurch document.</b></p> <p>Although it is possible to import any wiki page into Lurch, it does not work well to edit and re-post such pages to the wiki.</p> <p>To edit a non-Lurch wiki page, visit the page on the wiki and edit it there.</p>'
            });
            return;
          }
          tinymce.activeEditor.setContent(document);
          return tinymce.activeEditor.Settings.document.metadata = metadata;
        });
      }
    },
    wikiexport: {
      text: 'Export to wiki',
      context: 'file',
      onclick: function() {
        var loginCallback, pageName, password, postCallback, username;
        if (appIsRunningOnGitHub()) {
          return;
        }
        pageName = tinymce.activeEditor.Settings.document.get('wiki_title');
        if (pageName == null) {
          tinymce.activeEditor.Dialogs.alert({
            title: 'Page Title not set',
            message: '<p>You have not yet set the title under which this document should be published on the wiki.  See the document settings on the File menu.</p>'
          });
          return;
        }
        username = tinymce.activeEditor.Settings.application.get('wiki_username');
        password = tinymce.activeEditor.Settings.application.get('wiki_password');
        if ((username == null) || (password == null)) {
          tinymce.activeEditor.Dialogs.alert({
            title: 'No Wiki Credentials',
            message: '<p>You have not given your wiki username and password to the application settings.  See the application settings on the File menu.</p>'
          });
          return;
        }
        postCallback = function(result, error) {
          var match, url;
          if (error) {
            tinymce.activeEditor.Dialogs.alert({
              title: 'Posting Error',
              message: "<p>Error when posting to the wiki:</p> <p>" + error + "</p>"
            });
            return;
          }
          match = /^[^/]+\/\/[^/]+\//.exec(window.location.href);
          url = window.location.href.slice(0, match[0].length) + 'wiki/index.php?title=' + encodeURIComponent(pageName);
          return tinymce.activeEditor.Dialogs.alert({
            title: 'Document Posted',
            message: "<p>Posting succeeded.</p> <p><a href='" + url + "' target='_blank'>Visit posted page.</a></p>"
          });
        };
        loginCallback = function(result, error) {
          var content;
          if (error) {
            tinymce.activeEditor.Dialogs.alert({
              title: 'Wiki Login Error',
              message: "<p>Error when logging into the wiki:</p> <p>" + error + "</p>"
            });
            return;
          }
          content = tinymce.activeEditor.getContent();
          content = embedMetadata(content, tinymce.activeEditor.Settings.document.metadata);
          return tinymce.activeEditor.MediaWiki.exportPage(pageName, content, postCallback);
        };
        return tinymce.activeEditor.MediaWiki.login(username, password, loginCallback);
      }
    },
    appsettings: {
      text: 'Application settings...',
      context: 'file',
      onclick: function() {
        return tinymce.activeEditor.Settings.application.showUI();
      }
    },
    docsettings: {
      text: 'Document properties...',
      context: 'file',
      onclick: function() {
        return tinymce.activeEditor.Settings.document.showUI();
      }
    }
  };

  window.afterEditorReady = function(editor) {
    var A, D, match;
    A = editor.Settings.addCategory('application');
    A.setup = function(div) {
      return div.innerHTML = [editor.Settings.UI.heading('Wiki Login'), editor.Settings.UI.info('Entering a username and password here does NOT create an account on the wiki.  You must already have one.  If you do not, first visit <a href="/wiki/index.php" target="_blank" style="color: blue;">the wiki</a>, create an account, then return here.'), editor.Settings.UI.text('Username', 'wiki_username', A.get('wiki_username')), editor.Settings.UI.password('Password', 'wiki_password', A.get('wiki_password'))].join('\n');
    };
    A.teardown = function(div) {
      var elt;
      elt = function(id) {
        return div.ownerDocument.getElementById(id);
      };
      A.set('wiki_username', elt('wiki_username').value);
      return A.set('wiki_password', elt('wiki_password').value);
    };
    D = editor.Settings.addCategory('document');
    D.metadata = {};
    D.get = function(key) {
      return D.metadata[key];
    };
    D.set = function(key, value) {
      return D.metadata[key] = value;
    };
    D.setup = function(div) {
      return div.innerHTML = [editor.Settings.UI.heading('Wiki Publishing'), editor.Settings.UI.text('Publish to wiki under this title', 'wiki_title', D.get('wiki_title'))].join('\n');
    };
    D.teardown = function(div) {
      var elt;
      elt = function(id) {
        return div.ownerDocument.getElementById(id);
      };
      return D.set('wiki_title', elt('wiki_title').value);
    };
    editor.LoadSave.saveMetaData = function() {
      return D.metadata;
    };
    editor.LoadSave.loadMetaData = function(object) {
      return D.metadata = object;
    };
    editor.MediaWiki.setIndexPage('/wiki/index.php');
    editor.MediaWiki.setAPIPage('/wiki/api.php');
    if (match = /\?wikipage=(.*)/.exec(window.location.search)) {
      return editor.MediaWiki.importPage(decodeURIComponent(match[1]));
    }
  };

  appIsRunningOnGitHub = function() {
    var result;
    result = /nathancarter\.github\.io/.test(window.location.href);
    if (result) {
      tinymce.activeEditor.Dialogs.alert({
        title: 'Not Available Here',
        message: '<p>That functionality requires MediaWiki to be running on the server from which you\'re accessing this web app.</p> <p>On GitHub, we cannot run a MediaWiki server, so the functionality is disabled.</p> <p>The menu items remain for use in developer testing, as we prepare for a dedicated server that will have MediaWiki and the ability to publish documents to that wiki with a single click, or edit them in Lurch with a single click.</p> <p>Try back soon!</p>'
      });
    }
    return result;
  };

}).call(this);

//# sourceMappingURL=main-app.solo.js.map
