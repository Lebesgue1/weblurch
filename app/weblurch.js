// Generated by CoffeeScript 1.7.1
(function() {
  var DOMEditAction, DOMEditTracker, LurchEditor,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.DOMEditAction = DOMEditAction = (function() {
    function DOMEditAction() {
      var child, data, i, node, type, _i, _len, _ref, _ref1;
      type = arguments[0], node = arguments[1], data = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      if (!(node instanceof Node)) {
        throw Error('This is not a node: ' + node);
      }
      this.tracker = DOMEditTracker.instanceOver(node);
      this.node = node.address(this.tracker.getElement());
      if (type === 'appendChild') {
        if (data.length !== 1) {
          throw Error('Wrong # of parameters: ' + data);
        }
        if (!(data[0] instanceof Node)) {
          throw Error('Invalid parameter: ' + data);
        }
        this.toAppend = data[0].toJSON();
      } else if (type === 'insertBefore') {
        if (data.length !== 1 && data.length !== 2) {
          throw Error('Wrong # of parameters: ' + data);
        }
        if (!(data[0] instanceof Node)) {
          throw Error('Invalid parameter: ' + data[0]);
        }
        this.toInsert = data[0].toJSON();
        if (data.length === 2) {
          if (!(data[1] instanceof Node)) {
            throw Error('Invalid parameter: ' + data[0]);
          }
          if (data[1].parentNode !== node) {
            throw Error('Invalid child: ' + data[0]);
          }
          this.insertBefore = data[1].indexInParent();
        } else {
          this.insertBefore = node.childNodes.length;
        }
      } else if (type === 'normalize') {
        if (data.length !== 0) {
          throw Error('Wrong # of parameters: ' + data);
        }
        this.textChildren = {};
        _ref = node.childNodes;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          child = _ref[i];
          if (child instanceof Text) {
            this.textChildren[i] = child.textContent;
          }
        }
      } else if (type === 'removeAttribute') {
        if (data.length !== 1) {
          throw Error('Wrong # of parameters: ' + data);
        }
        this.name = data[0] + '';
        this.value = node.getAttribute(this.name);
      } else if (type === 'removeAttributeNode') {
        if (data.length !== 1) {
          throw Error('Wrong # of parameters: ' + data);
        }
        if (!(data[0] instanceof Attr)) {
          throw Error('Invalid attribute node: ' + data[0]);
        }
        _ref1 = data[0], this.name = _ref1.name, this.value = _ref1.value;
      } else if (type === 'removeChild') {
        if (data.length !== 1) {
          throw Error('Wrong # of parameters: ' + data);
        }
        if (!(data[0] instanceof Node)) {
          throw Error('Invalid parameter: ' + data[0]);
        }
        if (data[0].parentNode !== node) {
          throw Error('Invalid child: ' + data[0]);
        }
        this.childIndex = data[0].indexInParent();
        this.child = data[0].toJSON();
      } else if (type === 'replaceChild') {
        if (data.length !== 2) {
          throw Error('Wrong # of parameters: ' + data);
        }
        if (!(data[0] instanceof Node)) {
          throw Error('Invalid parameter: ' + data[0]);
        }
        if (!(data[1] instanceof Node)) {
          throw Error('Invalid parameter: ' + data[1]);
        }
        if (data[0].parentNode !== node) {
          throw Error('Invalid child: ' + data[0]);
        }
        this.childIndex = data[0].indexInParent();
        this.oldChild = data[0].toJSON();
        this.newChild = data[1].toJSON();
      } else if (type === 'setAttribute') {
        if (data.length !== 2) {
          throw Error('Wrong # of parameters: ' + data);
        }
        this.name = data[0] + '';
        this.newValue = data[1] + '';
        this.oldValue = node.getAttribute(this.name);
      } else if (type === 'setAttributeNode') {
        if (data.length !== 1) {
          throw Error('Wrong # of parameters: ' + data);
        }
        if (!(data[0] instanceof Attr)) {
          throw Error('Invalid parameter: ' + data[0]);
        }
        this.name = data[0].name;
        this.newValue = data[0].value;
        this.oldValue = node.getAttribute(this.name);
      } else {
        throw Error('Invalid DOMEditAction type: ' + type);
      }
    }

    DOMEditAction.prototype.toJSON = function() {
      return JSON.stringify({
        node: this.node,
        toAppend: this.toAppend,
        toInsert: this.toInsert,
        insertBefore: this.insertBefore,
        textChildren: this.textChildren,
        name: this.name,
        value: this.value,
        child: this.child,
        childIndex: this.childIndex,
        oldChild: this.oldChild,
        newChild: this.newChild,
        oldValue: this.oldValue,
        newValue: this.newValue
      });
    };

    return DOMEditAction;

  })();

  window.DOMEditTracker = DOMEditTracker = (function() {
    DOMEditTracker.instances = [];

    DOMEditTracker.instanceOver = function(node) {
      var tracker, _i, _len, _ref;
      if (!(node instanceof Node)) {
        return null;
      }
      _ref = this.instances;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tracker = _ref[_i];
        if (tracker.getElement() === node) {
          return tracker;
        }
      }
      return this.instanceOver(node.parentNode);
    };

    function DOMEditTracker(div) {
      this.element = null;
      if (div && (div != null ? div.tagName : void 0) !== 'DIV') {
        throw new Error('DOMEditTracker can only be ' + 'constructed in a DIV node');
      }
      this.element = div;
      this.stack = [];
      DOMEditTracker.instances.push(this);
    }

    DOMEditTracker.prototype.getElement = function() {
      return this.element;
    };

    DOMEditTracker.prototype.getEditActions = function() {
      return this.stack.slice(0);
    };

    DOMEditTracker.prototype.nodeEditHappened = function(action) {
      if (action instanceof DOMEditAction) {
        return this.stack.push(action);
      }
    };

    return DOMEditTracker;

  })();

  Node.prototype.address = function(ancestor) {
    var recur;
    if (ancestor == null) {
      ancestor = null;
    }
    if (this === ancestor) {
      return [];
    }
    if (!this.parentNode) {
      if (ancestor) {
        return null;
      } else {
        return [];
      }
    }
    recur = this.parentNode.address(ancestor);
    if (recur === null) {
      return null;
    }
    return recur.concat([this.indexInParent()]);
  };

  Node.prototype.indexInParent = function() {
    if (this.parentNode) {
      return Array.prototype.slice.apply(this.parentNode.childNodes).indexOf(this);
    } else {
      return -1;
    }
  };

  Node.prototype.index = function(address) {
    var _ref;
    if (!(address instanceof Array)) {
      throw Error('Node address function requires an array');
    }
    if (address.length === 0) {
      return this;
    }
    if (typeof address[0] !== 'number') {
      return void 0;
    }
    return (_ref = this.childNodes[address[0]]) != null ? _ref.index(address.slice(1)) : void 0;
  };

  Node.prototype.toJSON = function(verbose) {
    var attribute, chi, result, _i, _len, _ref;
    if (verbose == null) {
      verbose = true;
    }
    if (this instanceof Text) {
      return this.textContent;
    }
    if (this instanceof Comment) {
      if (verbose) {
        return {
          comment: true,
          content: this.textContent
        };
      } else {
        return {
          m: true,
          n: this.textContent
        };
      }
    }
    if (!(this instanceof Element)) {
      throw Error("Cannot serialize this node: " + this);
    }
    result = {
      tagName: this.tagName
    };
    if (this.attributes.length) {
      result.attributes = {};
      _ref = this.attributes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attribute = _ref[_i];
        result.attributes[attribute.name] = attribute.value;
      }
    }
    if (this.childNodes.length) {
      result.children = (function() {
        var _j, _len1, _ref1, _results;
        _ref1 = this.childNodes;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          chi = _ref1[_j];
          _results.push(chi.toJSON(verbose));
        }
        return _results;
      }).call(this);
    }
    if (!verbose) {
      result.t = result.tagName;
      delete result.tagName;
      result.a = result.attributes;
      delete result.attributes;
      result.c = result.children;
      delete result.children;
    }
    return result;
  };

  Node.fromJSON = function(json) {
    var attributes, child, children, key, result, value, _i, _len;
    if (typeof json === 'string') {
      return document.createTextNode(json);
    }
    if ('comment' in json && json.comment) {
      return document.createComment(json.content);
    }
    if ('m' in json && json.m) {
      return document.createComment(json.n);
    }
    if (!'tagName' in json && !'t' in json) {
      throw Error("Object has no t[agName]: " + this);
    }
    result = document.createElement(json.tagName || json.t);
    if (attributes = json.attributes || json.a) {
      for (key in attributes) {
        if (!__hasProp.call(attributes, key)) continue;
        value = attributes[key];
        result.setAttribute(key, value);
      }
    }
    if (children = json.children || json.c) {
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        child = children[_i];
        result.appendChild(Node.fromJSON(child));
      }
    }
    return result;
  };

  'appendChild insertBefore normalize removeAttribute\nremoveAttributeNode removeChild replaceChild\nsetAttribute setAttributeNode'.split(' ').map(function(methodName) {
    var original;
    original = Node.prototype[methodName];
    return Node.prototype[methodName] = function() {
      var args, event, result, tracker;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      tracker = DOMEditTracker.instanceOver(this);
      if (tracker) {
        event = (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(DOMEditAction, [methodName, this].concat(__slice.call(args)), function(){});
      }
      result = original.call.apply(original, [this].concat(__slice.call(args)));
      if (tracker) {
        tracker.nodeEditHappened(event);
      }
      return result;
    };
  });

  window.LurchEditor = LurchEditor = (function(_super) {
    __extends(LurchEditor, _super);

    LurchEditor.prototype.nextFreeId = function() {
      if (this.freeIds.length > 1) {
        return this.freeIds.shift();
      } else {
        return this.freeIds[0]++;
      }
    };

    LurchEditor.prototype.addFreeId = function(id) {
      if (id < this.freeIds[this.freeIds.length - 1]) {
        this.freeIds.push(id);
        return this.freeIds.sort(function(a, b) {
          return a - b;
        });
      }
    };

    function LurchEditor(div) {
      var i, usedIds;
      LurchEditor.__super__.constructor.call(this, div);
      usedIds = this.cleanIds(div);
      this.freeIds = usedIds.length === 0 ? [0] : (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = (Math.max.apply(Math, usedIds)) + 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (__indexOf.call(usedIds, i) < 0) {
            _results.push(i);
          }
        }
        return _results;
      })();
      this.assignIds(div);
    }

    LurchEditor.prototype.cleanIds = function(node) {
      var child, id, result, _i, _len, _ref;
      result = [];
      if (!(node instanceof Node)) {
        return result;
      }
      if (node.id) {
        if (/^\d+$/.test(node.id)) {
          result.push(parseInt(node.id));
        } else {
          node.removeAttribute('id');
        }
      }
      _ref = node.childNodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        result = result.concat((function() {
          var _j, _len1, _ref1, _results;
          _ref1 = this.cleanIds(child);
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            id = _ref1[_j];
            if (__indexOf.call(result, id) < 0) {
              _results.push(id);
            }
          }
          return _results;
        }).call(this));
      }
      return result;
    };

    LurchEditor.prototype.assignIds = function(node) {
      var child, _i, _len, _ref, _results;
      if (!(node instanceof Node)) {
        return;
      }
      if (node instanceof HTMLElement && !node.id) {
        node.id = this.nextFreeId();
      }
      _ref = node.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        _results.push(this.assignIds(child));
      }
      return _results;
    };

    LurchEditor.prototype.address = function(node) {
      if (this.element) {
        return node != null ? node.address(this.element) : void 0;
      } else {
        return null;
      }
    };

    LurchEditor.prototype.index = function(address) {
      if (this.element) {
        return this.element.index(address);
      } else {
        return null;
      }
    };

    return LurchEditor;

  })(DOMEditTracker);

}).call(this);

//# sourceMappingURL=weblurch.map
