// Generated by CoffeeScript 1.8.0
(function() {
  var installButtonClickHandlers, testState, update, waitingForMainApplication, waitingStorage;

  testState = {
    steps: []
  };

  waitingForMainApplication = true;

  waitingStorage = [];

  window.enterWaitingState = function() {
    var toStore;
    while (document.body.childNodes.length > 0) {
      toStore = document.body.childNodes[0];
      waitingStorage.push(toStore);
      ($(toStore)).remove();
    }
    return document.body.innerHTML = 'Waiting for main application page to load...<br> (If you reloaded this window by itself, you done wrong. Instead, close this window and reload the main application.)';
  };

  window.enterReadyState = function() {
    var node, _i, _len;
    while (document.body.childNodes.length > 0) {
      ($(document.body.childNodes[0])).remove();
    }
    for (_i = 0, _len = waitingStorage.length; _i < _len; _i++) {
      node = waitingStorage[_i];
      document.body.appendChild(node);
    }
    installButtonClickHandlers();
    return update();
  };

  $(window.enterWaitingState);

  update = function() {
    var args, ary, code, count, escapeApos, explanation, indent, index, step, string, title, writeStep, _i, _len, _ref;
    code = '';
    if ((testState.title == null) && (testState.steps == null)) {
      code = '(no steps recorded yet)';
    } else {
      writeStep = function(explanation, codeString) {
        var line, _i, _len, _ref, _results;
        if (explanation != null) {
          code += "\n" + explanation + "\n";
        }
        if (codeString != null) {
          if (explanation != null) {
            code += '\n';
          }
          _ref = codeString.split('\n');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            line = _ref[_i];
            _results.push(code += "        " + line + "\n");
          }
          return _results;
        }
      };
      escapeApos = function(text) {
        return text.replace(/'/g, '\\\'');
      };
      indent = function(text) {
        return '    ' + text.replace(RegExp('\n', 'g'), '\n    ');
      };
      code = '\nTest built with webLurch test-recording mode.\n\n';
      title = testState.title || 'untitled test';
      code += "    it '" + (escapeApos(title)) + "', inPage ->\n";
      ary = testState.steps;
      for (index = _i = 0, _len = ary.length; _i < _len; index = ++_i) {
        step = ary[index];
        if (index > 0 && ary[index].type === ary[index - 1].type) {
          count = 0;
        } else {
          count = 1;
          while ((index + count < ary.length) && (ary[index].type === ary[index + count].type)) {
            count++;
          }
        }
        if (step.type === 'comment') {
          writeStep(step.content);
        } else if (step.type === 'check contents') {
          string = "'" + (escapeApos(step.content)) + "'";
          writeStep('Check to be sure the editor contains the correct content.', "pageExpects allContent, 'toBeSimilarHTML',\n" + (indent(string)));
        } else if (step.type === 'wrong contents') {
          string = "'TO BE EDITED: " + (escapeApos(step.content)) + "'";
          writeStep("At this point the editor contains incorrect contents.  (The code below will need to be edited later to replace the incorrect expectation with a correct one.)\n \nExplanation of how the expectation below is incorrect:  " + step.explanation, "pageExpects allContent, 'toBeSimilarHTML',\n" + (indent(string)));
        } else if (step.type === 'key press') {
          explanation = (function() {
            switch (count) {
              case 0:
                return null;
              case 1:
                return 'Simulate pressing a key in the editor.';
              default:
                return 'Simulate pressing keys in the editor.';
            }
          })();
          args = "'" + step.content + "'";
          if (step.shift) {
            args += ", 'shift'";
          }
          if (step.ctrl) {
            args += ", 'ctrl'";
          }
          if (step.alt) {
            args += ", 'alt'";
          }
          writeStep(explanation, "pageKey " + args);
        } else if (step.type === 'typing') {
          writeStep('Simulate typing in the editor.', "pageType '" + (escapeApos(step.content)) + "'");
        } else if (step.type === 'click') {
          writeStep('Simulate a mouse click in the editor.', "pageClick " + step.x + ", " + step.y);
        } else if (step.type === 'button') {
          explanation = (function() {
            switch (count) {
              case 0:
                return null;
              case 1:
                return 'Simulate clicking a command button in the editor.';
              default:
                return 'Simulate clicking command buttons in the editor.';
            }
          })();
          writeStep(explanation, "pageCommand '" + (escapeApos(step.content)) + "'");
        } else {
          writeStep('ERROR: Unknown step type:', "'" + (escapeApos(step.type)) + "'\n# " + step.content);
        }
      }
    }
    return (_ref = document.getElementById('testCode')) != null ? _ref.textContent = code : void 0;
  };

  $(update);

  installButtonClickHandlers = function() {
    ($('#setTitle')).on('click', function() {
      var newTitle, _ref;
      newTitle = prompt('Enter new test title', (_ref = testState.title) != null ? _ref : '');
      if (newTitle !== null) {
        testState.title = newTitle;
        return update();
      }
    });
    ($('#addComment')).on('click', function() {
      var content;
      content = prompt('Enter your comment here', '');
      if (content !== null) {
        testState.steps.push({
          type: 'comment',
          content: content
        });
        return update();
      }
    });
    ($('#contentsCorrect')).on('click', function() {
      testState.steps.push({
        type: 'check contents',
        content: window.opener.tinymce.activeEditor.getContent()
      });
      return update();
    });
    ($('#contentsIncorrect')).on('click', function() {
      var explanation;
      explanation = prompt('Please provide an explanation of why the editor\'s contents are incorrect.  Include a suggestion of what they ought to be, if possible.', '');
      if (explanation !== null) {
        testState.steps.push({
          type: 'wrong contents',
          content: window.opener.tinymce.activeEditor.getContent(),
          explanation: explanation
        });
        return update();
      }
    });
    ($('#seeContents')).on('click', function() {
      var result;
      result = window.opener.tinymce.activeEditor.getContent();
      if (result === '') {
        return alert('Editor is empty.');
      } else {
        return alert('The editor contents are represented in HTML format below.\n\n' + result);
      }
    });
    return ($('#emailTest')).on('click', function() {
      var body, recipient, somethingIsTested, step, subject, _i, _len, _ref;
      somethingIsTested = false;
      _ref = testState.steps;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        step = _ref[_i];
        if (step.type.slice(-9) === ' contents') {
          somethingIsTested = true;
          break;
        }
      }
      if (!somethingIsTested) {
        alert('You have not made any assertions yet in the test. You must at some point mark the editor contents as correct or incorrect in order for the generated code to actually contain an assertion to be tested.');
        return;
      }
      recipient = 'ncarter@bentley.edu';
      subject = 'webLurch: recorded unit test';
      body = encodeURIComponent("\n \nThe following unit test was recorded on " + (new Date) + ".\n \n(Before sending this email, feel free to add any extra information you have here.)\n \n-----------begin test code------------\n " + (document.getElementById('testCode').textContent));
      return window.location.href = "mailto:" + recipient + "?subject=" + subject + "&body=" + body;
    });
  };

  window.editorKeyPress = function(keyCode, shift, ctrl, alt) {
    var letter;
    letter = String.fromCharCode(keyCode);
    if (/[a-zA-Z0-9 ]/.test(letter)) {
      if (testState.steps.length > 0 && testState.steps[testState.steps.length - 1].type === 'typing') {
        testState.steps[testState.steps.length - 1].content += letter;
      } else {
        testState.steps.push({
          type: 'typing',
          content: letter
        });
      }
    } else {
      testState.steps.push({
        type: 'key press',
        content: keyCode,
        shift: shift,
        ctrl: ctrl,
        alt: alt
      });
    }
    return update();
  };

  window.editorMouseClick = function(x, y) {
    testState.steps.push({
      type: 'click',
      x: x,
      y: y
    });
    return update();
  };

  window.buttonClicked = function(name) {
    testState.steps.push({
      type: 'button',
      content: name
    });
    return update();
  };

}).call(this);

//# sourceMappingURL=testrecorder.solo.js.map
