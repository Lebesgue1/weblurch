(function(){var e,a,o,t,n,i,r,d=[].slice;("undefined"==typeof n||null===n)&&(n=null!=(i="undefined"!=typeof module&&null!==module?module.exports:void 0)?i:window),"undefined"!=typeof require&&null!==require?(r=require("./openmath.duo"),o=r.OM,t=r.OMNode,a=require("./parsing.duo").Grammar):(a=window.Grammar,o=window.OM,t=window.OMNode),n.mathQuillParser=e=new a("expression"),e.addRule("digit",/[0-9]/),e.addRule("nonnegint","digit"),e.addRule("nonnegint",["digit","nonnegint"]),e.addRule("integer","nonnegint"),e.addRule("integer",[/-/,"nonnegint"]),e.addRule("float",["integer",/\./,"nonnegint"]),e.addRule("float",["integer",/\./]),e.addRule("infinity",[/∞/]),e.addRule("variable",/[a-zA-Z\u0374-\u03FF]/),e.addRule("atomic","integer"),e.addRule("atomic","float"),e.addRule("atomic","variable"),e.addRule("atomic","infinity"),e.addRule("factor","atomic"),e.addRule("factor",["atomic",/sup/,"atomic"]),e.addRule("factor",["factor",/[%]/]),e.addRule("factor",[/\$/,"factor"]),e.addRule("factor",["factor",/sup/,/[∘]/]),e.addRule("prodquo","factor"),e.addRule("prodquo",["prodquo",/[÷×·]/,"factor"]),e.addRule("prodquo",[/-/,"prodquo"]),e.addRule("sumdiff","prodquo"),e.addRule("sumdiff",["sumdiff",/[+±−-]/,"prodquo"]),e.addRule("ln",[/ln/,"atomic"]),e.addRule("log",[/log/,"atomic"]),e.addRule("log",[/log/,/sub/,"atomic","atomic"]),e.addRule("prodquo","ln"),e.addRule("prodquo","log"),e.addRule("factorial",["atomic",/!/]),e.addRule("factor","factorial"),e.addRule("setdiff","variable"),e.addRule("setdiff",["setdiff",/[∼]/,"variable"]),e.addRule("subscripted",["atomic",/sub/,"atomic"]),e.addRule("noun","subscripted"),e.addRule("fraction",[/fraction/,/\(/,"atomic","atomic",/\)/]),e.addRule("atomic","fraction"),e.addRule("root",[/√/,"atomic"]),e.addRule("root",[/nthroot/,"atomic",/√/,"atomic"]),e.addRule("atomic","root"),e.addRule("decoration",[/overline/,"atomic"]),e.addRule("decoration",[/overarc/,"atomic"]),e.addRule("atomic","decoration"),e.addRule("trigfunc",[/sin|cos|tan|cot|sec|csc/]),e.addRule("trigapp",["trigfunc","prodquo"]),e.addRule("trigapp",["trigfunc",/sup/,/\(/,/-|−/,/1/,/\)/,"prodquo"]),e.addRule("atomic","trigapp"),e.addRule("limit",[/lim/,/sub/,/\(/,"variable",/[→]/,"expression",/\)/,"prodquo"]),e.addRule("takesleftcoeff","limit"),e.addRule("sum",[/[Σ]/,/sub/,/\(/,"variable",/[=]/,"expression",/\)/,/sup/,"atomic","prodquo"]),e.addRule("sum",[/[Σ]/,/sup/,"atomic",/sub/,/\(/,"variable",/[=]/,"expression",/\)/,"prodquo"]),e.addRule("takesleftcoeff","sum"),e.addRule("differential",[/d/,"atomic"]),e.addRule("difffrac",[/fraction/,/\(/,/d/,/\(/,/d/,"variable",/\)/,/\)/]),e.addRule("indefint",[/[∫]/,"prodquo"]),e.addRule("defint",[/[∫]/,/sub/,"atomic",/sup/,"atomic","prodquo"]),e.addRule("defint",[/[∫]/,/sup/,"atomic",/sub/,"atomic","prodquo"]),e.addRule("factor","differential"),e.addRule("factor","difffrac"),e.addRule("takesleftcoeff","indefint"),e.addRule("takesleftcoeff","defint"),e.addRule("sumdiff","takesleftcoeff"),e.addRule("sumdiff",["factor",/[÷×·]/,"takesleftcoeff"]),e.addRule("sumdiff",["prodquo",/[+±−-]/,"takesleftcoeff"]),e.addRule("noun","sumdiff"),e.addRule("noun","setdiff"),e.addRule("atomicsentence",["noun",/[=≠≈≃≤≥<>]/,"noun"]),e.addRule("atomicsentence",[/[¬]/,"atomicsentence"]),e.addRule("sentence","atomicsentence"),e.addRule("sentence",[/[∴]/,"sentence"]),e.addRule("atomic",[/\(/,"noun",/\)/]),e.addRule("atomicsentence",[/\(/,"sentence",/\)/]),e.addRule("interval",[/[\(\[]/,"noun",/,/,"noun",/[\)\]]/]),e.addRule("atomic","interval"),e.addRule("absval",[/\|/,"noun",/\|/]),e.addRule("atomic","absval"),e.addRule("expression","noun"),e.addRule("expression","sentence"),e.setOption("expressionBuilder",function(a){var n,i,r,l,u,s,c,f,m,b;return f={"+":o.symbol("plus","arith1"),"-":o.symbol("minus","arith1"),"−":o.symbol("minus","arith1"),"±":o.symbol("plusminus","multiops"),"×":o.symbol("times","arith1"),"·":o.symbol("times","arith1"),"÷":o.symbol("divide","arith1"),"^":o.symbol("power","arith1"),"∞":o.symbol("infinity","nums1"),"√":o.symbol("root","arith1"),"∼":o.symbol("set1","setdiff"),"=":o.symbol("eq","relation1"),"<":o.symbol("lt","relation1"),">":o.symbol("gt","relation1"),"≠":o.symbol("neq","relation1"),"≈":o.symbol("approx","relation1"),"≤":o.symbol("le","relation1"),"≥":o.symbol("ge","relation1"),"≃":o.symbol("modulo_relation","integer2"),"¬":o.symbol("not","logic1"),"∘":o.symbol("degrees","units"),$:o.symbol("dollars","units"),"%":o.symbol("percent","units"),"∫":o.symbol("int","calculus1"),"def∫":o.symbol("defint","calculus1"),ln:o.symbol("ln","transc1"),log:o.symbol("log","transc1"),"unary-":o.symbol("unary_minus","arith1"),overarc:o.symbol("overarc","decoration"),overline:o.symbol("overline","decoration"),d:o.symbol("d","diff")},r=function(){var n,i,r,l,u;return r=1<=arguments.length?d.call(arguments,0):[],r=function(){var e,t,i;for(i=[],e=0,t=r.length;t>e;e++)n=r[e],"number"==typeof n&&(n=a[n]),f.hasOwnProperty(n)&&(n=f[n]),"string"==typeof n&&(n=o.decode(n)),i.push(n);return i}(),u=o.application.apply(o,r),e.expressionBuilderDebug&&(l=function(){var e,a,o;for(o=[],e=0,a=r.length;a>e;e++)i=r[e],o.push(i instanceof t?i.encode():""+i);return o}(),console.log.apply(console,["build"].concat(d.call(l),["-->"],[u]))),u},s=function(){var e,t;switch(a[0]){case"digit":case"nonnegint":return a.slice(1).join("");case"integer":return o.integer(parseInt(a.slice(1).join("")));case"float":return o["float"](parseFloat(""+a[1].value+a.slice(2).join("")));case"variable":return o.variable(a[1]);case"infinity":return f[a[1]];case"sumdiff":case"prodquo":switch(a.length){case 4:return r(2,1,3);case 3:return r("unary-",2)}break;case"factor":switch(a.length){case 4:return"∘"===a[3]?r("×",1,f["∘"]):r("^",1,3);case 3:return"%"===a[2]?r("×",1,f["%"]):r("×",2,f.$)}break;case"fraction":return r("÷",3,4);case"root":switch(a.length){case 3:return r("√",2,o.integer(2));case 5:return r("√",4,2)}break;case"ln":return r("ln",2);case"log":switch(a.length){case 3:return r("log",o.integer(10),2);case 5:return r("log",3,4)}break;case"atomic":if(4===a.length&&"("===a[1]&&")"===a[3])return a[2];break;case"atomicsentence":switch(a.length){case 4:return r(2,1,3);case 3:return r(1,2)}break;case"decoration":return r(1,2);case"sentence":if("∴"===a[1])return a[2];break;case"interval":return u="("===a[1]?"o":"c",c=")"===a[5]?"o":"c",r(o.symbol("interval_"+u+c,"interval1"),2,4);case"absval":return r(o.symbol("abs","arith1"),2);case"trigapp":switch(a.length){case 3:return r(o.symbol(a[1],"transc1"),2);case 8:return r(o.symbol("arc"+a[1],"transc1"),7)}break;case"subscripted":return r(1,3);case"factorial":return r(o.symbol("factorial","integer1"),1);case"limit":return r(o.symbol("limit","limit1"),6,o.symbol("both_sides","limit1"),o.binding(o.symbol("lambda","fns1"),a[4],a[8]));case"sum":return e="sup"===a[2]?[6,8,3]:[4,6,9],b=e[0],l=e[1],m=e[2],r(o.symbol("sum","arith1"),o.application(o.symbol("interval","interval1"),a[l],a[m]),o.binding(o.symbol("lambda","fns1"),a[b],a[10]));case"differential":return r("d",2);case"difffrac":return r("÷","d",r("d",6));case"indefint":return r("∫",2);case"defint":return t="sup"===a[2]?[5,3]:[3,5],n=t[0],i=t[1],r("def∫",n,i,6)}}(),null==s&&(s=a[1]),e.expressionBuilderDebug&&console.log(a instanceof t?a.encode():""+a,"--->",s instanceof t?s.encode():s),s}),e.setOption("comparator",function(e,a){return null!=e&&"function"==typeof e.equals?e.equals(a):void 0})}).call(this);
//# sourceMappingURL=mathquill-parser.solo.min.js.map